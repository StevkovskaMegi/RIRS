name: Frontend CI/CD

on:
  push:
    branches:
      - main
      - production
  pull_request:
    branches:
      - main
      - production

jobs:
  # Gradnja frontenda
  build-frontend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: ./front/node_modules
          key: ${{ runner.os }}-front-${{ hashFiles('./front/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-front-

      - name: Install dependencies
        run: |
          cd ./front
          npm ci

      - name: Build application
        run: |
          cd ./front
          npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: ./front/build/

  # Testiranje frontenda
  test-frontend:
    needs: build-frontend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: ./front/node_modules
          key: ${{ runner.os }}-front-${{ hashFiles('./front/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-front-

      - name: Install dependencies
        run: |
          cd ./front
          npm install

      - name: Run tests with coverage
        run: |
          cd ./front
          npm test -- --coverage

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: ./front/coverage/
  # Gradnja Docker slike in nalaganje na Docker Hub - Development
  dockerize-and-push-dev:
    needs: test-frontend
    runs-on: ubuntu-latest
    environment: Development
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build Docker image for Frontend
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/front:dev -f ./Dockerfile ./front
        docker tag ${{ secrets.DOCKER_USERNAME }}/front:dev ${{ secrets.DOCKER_USERNAME }}/front:${{ github.sha }}
        docker push ${{ secrets.DOCKER_USERNAME }}/front:dev
        docker push ${{ secrets.DOCKER_USERNAME }}/front:${{ github.sha }}

    - name: Push Docker image to Docker Hub
      run: |
        docker push ${{ secrets.DOCKER_USERNAME }}/front:dev
        docker push ${{ secrets.DOCKER_USERNAME }}/front:${{ github.sha }}
   deploy-to-github-pages:
    needs: test-frontend
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./front  # Adjust this path to the folder containing index.html


  # Step 3: Docker Image Build and Push for Development
  dockerize-and-push-dev:
    needs: create-static-site
    runs-on: ubuntu-latest
    environment: Development
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build Docker image for Development
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/front:dev ./front
          docker tag ${{ secrets.DOCKER_USERNAME }}/front:dev ${{ secrets.DOCKER_USERNAME }}/front:${{ github.sha }}

      - name: Push Docker image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/front:dev
          docker push ${{ secrets.DOCKER_USERNAME }}/front:${{ github.sha }}

  # Step 4: Docker Image Build and Push for Production (with manual approval)
  dockerize-and-push-prod:
    needs: create-static-site
    runs-on: ubuntu-latest
    environment:
      name: Production
      url: ${{ steps.deploy-to-github-pages.outputs.page_url }}
    if: github.ref == 'refs/heads/production'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Check for Quality Gate (for Production)
        run: |
          curl -u ${{ secrets.SONAR_TOKEN }}: \
            "https://sonarcloud.io/api/project_badges/measure?project=${{ secrets.PROJECT_KEY }}&metric=alert_status" | grep -q "OK" || exit 1

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build Docker image for Production
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/front:prod ./front
          docker tag ${{ secrets.DOCKER_USERNAME }}/front:prod ${{ secrets.DOCKER_USERNAME }}/front:${{ github.sha }}

      - name: Push Docker image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/front:prod
          docker push ${{ secrets.DOCKER_USERNAME }}/front:${{ github.sha }}
